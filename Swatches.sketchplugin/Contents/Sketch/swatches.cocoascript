/*----------------------------------------------------------

Copyright 2017 Ashung Hung

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

----------------------------------------------------------*/

@import "MochaJSDelegate.js";
@import "../Resources/swatches.js";

var onRun = function(context) {

    var userDefaults = NSUserDefaults.standardUserDefaults();
    var swatchDefaultKey = "plugin_sketch_swatches_default_init_code";

    // Main window
    var title = "Swatches";
    var identifier = "com.ashung.hung.swatches";
    var threadDictionary = NSThread.mainThread().threadDictionary();

    if (threadDictionary[identifier]) {
        return;
    }

    var windowWidth = 392,
        windowHeight = 567;
    var swatchesWindow = NSPanel.alloc().init();
    swatchesWindow.setFrame_display(NSMakeRect(0, 0, windowWidth, windowHeight), true);
    swatchesWindow.setStyleMask(NSTexturedBackgroundWindowMask | NSTitledWindowMask | NSClosableWindowMask);
    swatchesWindow.setBackgroundColor(NSColor.whiteColor());
    swatchesWindow.standardWindowButton(NSWindowMiniaturizeButton).setHidden(true);
    swatchesWindow.standardWindowButton(NSWindowZoomButton).setHidden(true);
    swatchesWindow.setTitle(title);
    swatchesWindow.setTitlebarAppearsTransparent(true);
    swatchesWindow.becomeKeyWindow();
    swatchesWindow.setLevel(NSFloatingWindowLevel);
    threadDictionary[identifier] = swatchesWindow;
    COScript.currentCOScript().setShouldKeepAround_(true);

    // Add Web View to window
    var webView = WebView.alloc().initWithFrame(NSMakeRect(0, 0, windowWidth, windowHeight - 24));
    var windowObject = webView.windowScriptObject();
    var delegate = new MochaJSDelegate({

        "webView:didFinishLoadForFrame:" : (function(webView, webFrame) {

            var defaultSwatch = userDefaults.stringForKey(swatchDefaultKey);
            if (!defaultSwatch) {
                var initCode = swatches[0]["handler"] + '("' + swatches[0]["title"] + '")';
            } else {
                var initCode = defaultSwatch;
            }
            windowObject.evaluateWebScript(initCode);

            userDefaults.setObject_forKey(initCode, swatchDefaultKey);
            userDefaults.synchronize();

            ga(context, "open", "open");

        }),

        "webView:didChangeLocationWithinPageForFrame:" : (function(webView, webFrame) {

            var locationHash = windowObject.evaluateWebScript("window.location.hash");
            var title = windowObject.evaluateWebScript("document.getElementById('title').innerHTML");
            var colorName = windowObject.evaluateWebScript("document.getElementById('colorName').innerHTML");

            // log(locationHash);

            // Fixs window blur
            if (/^#windowOnFocus_.*/i.test(locationHash)) {
                var point = swatchesWindow.currentEvent().locationInWindow();
                var x = point.x;
                var y = windowHeight - point.y - 24;
                if (x > 0 && y > 0) {
                    windowObject.evaluateWebScript("clickAtPoint(" + x + ", " + y + ")");
                }
            }

            // Save last opened swatch.
            if (/^#init_.*/i.test(locationHash)) {
                var handler = locationHash.substr(1);
                var initJSCode = handler + '("' + getTitleFromHandler(handler) + '")';
                userDefaults.setObject_forKey(initJSCode, swatchDefaultKey);
                userDefaults.synchronize();
            }

             // Fill
            if (/^#[A-F0-9]{6}-fill/i.test(locationHash)) {
                var hex = locationHash.match(/^#([A-F0-9]{6})/)[1];
                var selection = updateContext().selection;
                if (selection.count() > 0) {
                    for (var i = 0; i < selection.count(); i++) {
                        var layer = selection.objectAtIndex(i);
                        setFillColor(layer, hexToMSColor(hex));
                    }
                    updateContext().document.reloadInspector();
                } else {
                    updateContext().document.showMessage("Please selected more than one layer.");
                }
            }

            // Stroke
            if (/^#[A-F0-9]{6}-stroke/i.test(locationHash)) {
                var hex = locationHash.match(/^#([A-F0-9]{6})/)[1];
                var selection = updateContext().selection;
                if (selection.count() > 0) {
                    for (var i = 0; i < selection.count(); i++) {
                        var layer = selection.objectAtIndex(i);
                        setStrokeColor(layer, hexToMSColor(hex));
                    }
                    updateContext().document.reloadInspector();
                } else {
                    updateContext().document.showMessage("Please selected more than one layer.");
                }
            }

            // Add to document colors
            if (/^#[A-F0-9]{6}-add/i.test(locationHash)) {
                var hex = locationHash.match(/^#([A-F0-9]{6})/)[1];
                addColorToDocumentColors(updateContext().document, hexToMSColor(hex));
                updateContext().document.showMessage("The color #" + hex + " has add to document colors.");
            }

            // Copy
            if (/^#[A-F0-9]{6}-copy/i.test(locationHash)) {
                var hex = locationHash.match(/^#([A-F0-9]{6})/)[1];
                var message = "The color #" + hex + " has been copied.";
                var code = hex;
                copyToClipBoard(updateContext().document, message, code);
            }

            // Save to system color picker
            if (/^#save-to-system/i.test(locationHash)) {
                var colorsString = windowObject.evaluateWebScript("getAllColors()");
                var colors = JSON.parse(colorsString);

                var systemColorList = NSColorList.alloc().init();
                var systemColorListPath = NSHomeDirectory().stringByAppendingPathComponent("Library/Colors/" + title + ".clr");
                for (var i = 0; i < colors.length; i++) {
                    var color = hexToNSColor(colors[i][1]);
                    systemColorList.setColor_forKey(color, colors[i][0]);
                }

                // Save file to ~/Library/Colors/
                systemColorList.writeToFile(systemColorListPath);

                updateContext().document.showMessage('Color palette has saved to the system color picker, restart Sketch and run "View" - "Show Colors" to show it.');
            }

        })
    });

    webView.setFrameLoadDelegate_(delegate.getClassInstance());
    webView.setMainFrameURL_(context.plugin.urlForResourceNamed("index.html").path());

    swatchesWindow.contentView().addSubview(webView);
    swatchesWindow.center();
    swatchesWindow.makeKeyAndOrderFront(nil);

    // Close Window
    var closeButton = swatchesWindow.standardWindowButton(NSWindowCloseButton);
    closeButton.setCOSJSTargetFunction(function(sender) {
        COScript.currentCOScript().setShouldKeepAround(false);
        threadDictionary.removeObjectForKey(identifier);
        swatchesWindow.close();
    });
    closeButton.setAction("callAction:");

};


var website = function(context) {
    openUrlInBrowser(context.plugin.homepageURL() + "");
    ga(context, "website", "website");
};

var reportIssue = function(context) {
    openUrlInBrowser(context.plugin.homepageURL() + "/issues");
    ga(context, "issues", "issues");
};

var donate = function() {
    openUrlInBrowser("https://ashung.github.io/donate.html");
    ga(context, "donate", "donate");
};

function openUrlInBrowser(url) {
    NSWorkspace.sharedWorkspace().openURL(NSURL.URLWithString(url));
}

function getTitleFromHandler(handler) {
    for (var i = 0; i < swatches.length; i++) {
        if (swatches[i].handler == handler) {
            return swatches[i].title;
        }
    }
}

function hexToMSColor(hex) {
    var r = parseInt(hex.substring(0, 2), 16) / 255,
        g = parseInt(hex.substring(2, 4), 16) / 255,
        b = parseInt(hex.substring(4, 6), 16) / 255,
        a = 1;
    return MSColor.colorWithRed_green_blue_alpha(r, g, b, a);
}

function hexToNSColor(hex) {
    var r = parseInt(hex.substring(0, 2), 16) / 255,
        g = parseInt(hex.substring(2, 4), 16) / 255,
        b = parseInt(hex.substring(4, 6), 16) / 255,
        a = 1;
    return NSColor.colorWithRed_green_blue_alpha(r, g, b, a);
}

function setFillColor(layer, color) {
    if (layer.class() == "MSShapeGroup") {
        var fills = layer.style().enabledFills();
        if (fills.count() > 0 && fills.lastObject().fillType() == 0) {
            fills.lastObject().setColor(color);
        } else {
            var fill = layer.style().addStylePartOfType(0);
            fill.setFillType(0);
            fill.setColor(color);
        }
    }
    if (layer.class() == "MSTextLayer") {
        layer.setTextColor(color);
    }
}

function setStrokeColor(layer, color) {
    if (layer.class() == "MSShapeGroup") {
        var borders = layer.style().enabledBorders();
        if (borders.count() > 0 && borders.lastObject().fillType() == 0) {
            borders.lastObject().setColor(color);
        } else {
            var border = layer.style().addStylePartOfType(1);
            border.setFillType(0);
            border.setColor(color);
            border.setPosition(2);
            border.setThickness(1);
        }
    }
}

function updateContext() {
    var doc = NSDocumentController.sharedDocumentController().currentDocument();

    if (MSApplicationMetadata.metadata().appVersion > 41.2) {
        var selection = doc.selectedLayers().layers();
    } else {
        var selection = doc.selectedLayers();
    }

    return {
        document: doc,
        selection: selection
    }
}

function addColorToDocumentColors(document, mscolor) {
    var documentColors = document.documentData().assets().colors();
    documentColors.addObject(mscolor);
    document.showMessage("The color has been added to document colors.");
}

function copyToClipBoard(document, message, str) {
    var pboard = NSPasteboard.generalPasteboard();
    pboard.clearContents();
    pboard.setString_forType_(str, NSStringPboardType);
    document.showMessage(message);
}

function ga(context, eventCategory, eventAction, eventLabel, eventValue) {

    var uuidKey = 'google.analytics.uuid';
    var uuid = NSUserDefaults.standardUserDefaults().objectForKey(uuidKey);
    if (!uuid) {
        uuid = NSUUID.UUID().UUIDString();
        NSUserDefaults.standardUserDefaults().setObject_forKey(uuid, uuidKey);
    }

    var trackingID = "UA-99098773-4",
        appName = encodeURI(context.plugin.name()),
        appId = context.plugin.identifier(),
        appVersion = context.plugin.version();

    var url = "https://www.google-analytics.com/collect?v=1";
    // Tracking ID
    url += "&tid=" + trackingID;
    // Source
    url += "&ds=sketch" + MSApplicationMetadata.metadata().appVersion;
    // Client ID
    url += "&cid=" + uuid;
    // pageview, screenview, event, transaction, item, social, exception, timing
    url += "&t=event";
    // App Name
    url += "&an=" + appName;
    // App ID
    url += "&aid=" + appId;
    // App Version
    url += "&av=" + appVersion;
    // Event category
    url += "&ec=" + encodeURI(eventCategory);
    // Event action
    url += "&ea=" + encodeURI(eventAction);
    // Event label
    if (eventLabel) {
        url += "&el=" + encodeURI(eventLabel);
    }
    // Event value
    if (eventValue) {
        url += "&ev=" + encodeURI(eventValue);
    }

    var session = NSURLSession.sharedSession();
    var task = session.dataTaskWithURL(NSURL.URLWithString(NSString.stringWithString(url)));
    task.resume();

}
